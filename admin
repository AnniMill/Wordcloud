import streamlit as st
import pandas as pd
import os
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from io import BytesIO
from PIL import Image
import numpy as np
import json

st.set_page_config(page_title="Admin Panel", page_icon="üß∞", layout="wide")

ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD", "secret123")

if "admin_authenticated" not in st.session_state:
    st.session_state.admin_authenticated = False

if not st.session_state.admin_authenticated:
    st.title("üîí Admin Login")
    pw = st.text_input("Password", type="password")
    if st.button("Unlock"):
        if pw == ADMIN_PASSWORD:
            st.session_state.admin_authenticated = True
            st.experimental_rerun()
        else:
            st.error("Incorrect password.")
    st.stop()

# ‚úÖ Admin dashboard
st.title("üß∞ Admin Dashboard")
session_files = sorted([
    f"data/{f}" for f in os.listdir("data")
    if f.startswith("submissions_") and f.endswith(".csv")
])
selected_session = st.selectbox("üìÇ Choose a session", session_files)

# ‚ûï Create a new session file
with st.expander("‚ûï Create New Session"):
    new_session_name = st.text_input("New Session Name", key="create_session").strip().lower().replace(" ", "_")
    if st.button("Create Session"):
        fname = f"submissions_{new_session_name}.csv"
        if new_session_name and not os.path.exists(fname):
            pd.DataFrame(columns=["timestamp", "response1", "response2"]).to_csv(fname, index=False)
            st.success(f"Session '{new_session_name}' created!")
            st.experimental_rerun()
        else:
            st.warning("Invalid or duplicate session name.")

# Load selected session
df = pd.read_csv(selected_session) if selected_session else pd.DataFrame()
all_text = " ".join(df["response1"].dropna().tolist() + df["response2"].dropna().tolist()) if not df.empty else ""

# Data display
st.subheader("üìã Submissions")
if not df.empty:
    st.dataframe(df, use_container_width=True)
    st.download_button("‚¨á Download", df.to_csv(index=False), selected_session)
else:
    st.info("No submissions in this session yet.")

# üé® Theme upload
st.subheader("üé® Load Theme")
if "theme_settings" not in st.session_state:
    st.session_state.theme_settings = {
        "backgroundColor": "#FFFFFF", "colormap": "viridis", "maxWords": 100, "randomSeed": 42
    }

theme_file = st.file_uploader("Upload .json theme", type="json")
if theme_file:
    try:
        loaded = json.load(theme_file)
        st.session_state.theme_settings.update(loaded)
        st.success("Theme loaded.")
    except:
        st.error("Invalid theme file.")

# Theme controls
bg = st.color_picker("Background Color", st.session_state.theme_settings["backgroundColor"])
colormap = st.selectbox("Color Map", ["viridis", "plasma", "magma", "inferno", "Set3", "Pastel1"])
max_words = st.slider("Max Words", 10, 200, st.session_state.theme_settings["maxWords"])
random_seed = st.slider("Seed", 0, 100, st.session_state.theme_settings["randomSeed"])
font_file = st.file_uploader("Upload Font", type=["ttf"])
mask_file = st.file_uploader("Upload Mask", type=["png", "jpg"])

font_path = None
if font_file:
    font_path = "custom_font.ttf"
    with open(font_path, "wb") as f:
        f.write(font_file.getbuffer())

mask = None
if mask_file:
    mask = np.array(Image.open(mask_file).convert("L"))

# Export theme
if st.button("üì• Export Theme"):
    theme = {
        "backgroundColor": bg, "colormap": colormap,
        "maxWords": max_words, "randomSeed": random_seed
    }
    st.download_button("‚¨á Download Theme", json.dumps(theme, indent=2), "custom_theme.json")

# Generate word cloud
st.subheader("üå•Ô∏è Word Cloud Preview")
if all_text.strip():
    wc = WordCloud(
        background_color=bg, colormap=colormap, max_words=max_words,
        font_path=font_path, mask=mask, random_state=random_seed,
        width=800, height=400
    ).generate(all_text)

    fig, ax = plt.subplots(figsize=(10, 5))
    ax.imshow(wc, interpolation
